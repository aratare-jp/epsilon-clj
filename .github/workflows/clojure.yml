name: Clojure CI

on:
  push:
    branches:
      - master
      - develop
  create:
    tags:
      - v*

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
    steps:
      - uses: actions/checkout@v2

      - uses: DeLaGuardo/setup-clojure@master
        with:
          lein: 2.9.5

      - uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - run: pip install mkdocs-material

      - name: Install dependencies
        run: lein deps

      - name: Run tests
        run: lein with-profile test cloverage --runner :eftest --codecov

      - if: matrix.os == 'ubuntu-latest'
        name: Upload code coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./target/coverage/codecov.json
          flags: unittests
          name: epsilon-clj-unit
          fail_ci_if_error: true
          verbose: true

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      - uses: DeLaGuardo/setup-clojure@master
        with:
          lein: 2.9.5

      - uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - run: pip install mkdocs-material
      - run: pip install mkdocs-macros-plugin
      - run: pip install mike

      - run: |
          git config user.name "Rex Truong"
          git config user.email "rextruong@pm.me"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Build Uberjar
        run: lein uberjar

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/uberjar/epsilon-${{ steps.get_version.outputs.VERSION }}-standalone.jar
          asset_name: epsilon-${{ steps.get_version.outputs.VERSION }}-standalone.jar
          asset_content_type: application/java-archive

      - name: Upload MKDocs
        run: |
          mike deploy -p -f ${{ steps.get_version.outputs.VERSION }} latest
          mike set-default -p -f latest